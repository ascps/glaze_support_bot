import logging
import time
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from telegram.ext import ContextTypes, ConversationHandler, filters
from config import *
import re

logger = logging.getLogger(__name__)

class UserData:
    def __init__(self):
        self.problem_type = None
        self.description = None
        self.media = []
        self.staff_response = None
        self.message_ids = []
        self.username = None
        self.phone_number = None

user_sessions = {}

def get_start_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîß –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–∫–ª–µ–∏—Ç—å —Å—Ç–µ–∫–ª–æ", callback_data='application_problem')],
        [InlineKeyboardButton("‚ùì –£ –º–µ–Ω—è –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞", callback_data='other_problem')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_send_confirmation_keyboard():
    keyboard = [
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='confirm_send')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_send')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_feedback_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞", callback_data='thanks')],
        [InlineKeyboardButton("üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data='more_help')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_staff_reply_keyboard(user_id, username):
    keyboard = [
        [InlineKeyboardButton(f"‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å @{username}", callback_data=f'staff_reply_{user_id}')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def delete_previous_keyboards(context, user_id):
    if user_id in user_sessions:
        for msg_id in user_sessions[user_id].message_ids:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        user_sessions[user_id].message_ids = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_id = update.effective_user.id
        user_sessions[user_id] = UserData()
        user_sessions[user_id].username = update.effective_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        await update.message.reply_text(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ì–ª–∞–∑—É—Ä—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:",
            reply_markup=get_start_keyboard()
        )
        return STATE_PROBLEM_SELECTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def handle_problem_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        user_data = user_sessions.get(user_id)
        
        if not user_data:
            return await start(update, context)

        if query.data == 'application_problem':
            user_data.problem_type = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞–∫–ª–µ–π–∫–æ–π"
            await query.edit_message_text(
                "üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø—Ä–æ–±–ª–µ–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ:",
                reply_markup=None
            )
            
            msg = await context.bot.send_message(
                chat_id=user_id,
                text="‚¨áÔ∏è –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ:",
                reply_markup=get_send_confirmation_keyboard()
            )
            user_data.message_ids.append(msg.message_id)
            
            return STATE_COLLECT_MEDIA
        else:
            user_data.problem_type = "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
            await query.edit_message_text(
                "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:",
                reply_markup=None
            )
            
            msg = await context.bot.send_message(
                chat_id=user_id,
                text="‚¨áÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ:",
                reply_markup=get_send_confirmation_keyboard()
            )
            user_data.message_ids.append(msg.message_id)
            
            return STATE_COLLECT_DESCRIPTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_problem_type: {str(e)}")
        return ConversationHandler.END

async def collect_application_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        user_data = user_sessions.get(user_id)
        
        if not user_data:
            return

        await delete_previous_keyboards(context, user_id)

        if update.message.photo:
            user_data.media.append(('photo', update.message.photo[-1].file_id))
            reply_text = "üì∑ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ."
        elif update.message.video:
            user_data.media.append(('video', update.message.video.file_id))
            reply_text = "üé• –í–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ."
        elif update.message.text:
            user_data.description = update.message.text
            reply_text = "üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞—è–≤–∫—É."

        msg = await update.message.reply_text(
            text=f"{reply_text}\n\n‚¨áÔ∏è –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ:",
            reply_markup=get_send_confirmation_keyboard()
        )
        user_data.message_ids.append(msg.message_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

async def collect_other_problem_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        user_data = user_sessions.get(user_id)
        
        if user_data and update.message.text:
            await delete_previous_keyboards(context, user_id)
            user_data.description = update.message.text
            
            msg = await update.message.reply_text(
                text="üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n\n‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",
                reply_markup=get_send_confirmation_keyboard()
            )
            user_data.message_ids.append(msg.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

async def confirm_send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        user_data = user_sessions.get(user_id)
        
        if not user_data:
            return ConversationHandler.END

        if query.data == 'confirm_send':
            try:
                await delete_previous_keyboards(context, user_id)
                await send_application_to_staff(context, user_id, user_data)
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                )
                return STATE_AWAIT_STAFF_REPLY
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {str(e)}")
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            await delete_previous_keyboards(context, user_id)
            await context.bot.send_message(
                chat_id=user_id,
                text="üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start"
            )
        
        user_sessions.pop(user_id, None)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_send: {str(e)}")
        return ConversationHandler.END

async def send_application_to_staff(context: ContextTypes.DEFAULT_TYPE, user_id: int, user_data: UserData) -> None:
    try:
        staff_chat_id = context.bot_data.get('staff_chat_id')
        if not staff_chat_id:
            raise ValueError("ID —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        username = user_data.username
        phone = user_data.phone_number or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        
        ticket_number = f"TICKET-{user_id}-{int(time.time()) % 10000:04d}"
        
        message_text = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: #{ticket_number}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üìå –¢–∏–ø: {user_data.problem_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user_data.description or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            f"üí¨ –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

        staff_message = await context.bot.send_message(
            chat_id=staff_chat_id,
            text=message_text,
            reply_markup=get_staff_reply_keyboard(user_id, username)
        )

        for media_type, file_id in user_data.media:
            try:
                if media_type == 'photo':
                    await staff_message.reply_photo(
                        photo=file_id,
                        caption=f"üì∑ –§–æ—Ç–æ –æ—Ç @{username}",
                        reply_markup=get_staff_reply_keyboard(user_id, username)
                    )
                elif media_type == 'video':
                    await staff_message.reply_video(
                        video=file_id,
                        caption=f"üé• –í–∏–¥–µ–æ –æ—Ç @{username}",
                        reply_markup=get_staff_reply_keyboard(user_id, username)
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {str(e)}")
                await context.bot.send_message(
                    chat_id=staff_chat_id,
                    text=f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{username}",
                    reply_markup=get_staff_reply_keyboard(user_id, username)
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_application_to_staff: {str(e)}")
        raise

async def handle_staff_reply_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith('staff_reply_'):
            user_id = int(query.data.split('_')[-1])
            context.user_data['replying_to'] = {
                'user_id': user_id,
                'username': user_sessions[user_id].username
            }
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è @{user_sessions[user_id].username}:"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_staff_reply_button: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ reply.")

async def handle_staff_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = None
        username = None
        response_text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        if 'replying_to' in context.user_data:
            user_id = context.user_data['replying_to']['user_id']
            username = context.user_data['replying_to']['username']
            del context.user_data['replying_to']
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ reply
        elif update.message.reply_to_message:
            original_message = update.message.reply_to_message.text
            match = re.search(r'ID: (\d+)', original_message)
            if match:
                user_id = int(match.group(1))
                username_match = re.search(r'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @(\w+)', original_message)
                if username_match:
                    username = username_match.group(1)

        if not user_id or not username:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{response_text}",
                reply_markup=get_feedback_keyboard()
            )
            await update.message.reply_text(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}"
            )
        except Exception as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
            logger.error(error_msg)
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_staff_response: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()

        if query.data == 'thanks':
            user_msg = "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ /start"
            feedback_msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_sessions[user_id].username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ—à–µ–Ω–∏–µ"
        else:
            user_msg = "üõé –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏. –î–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ - /start"
            feedback_msg = f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_sessions[user_id].username} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å"

        await query.edit_message_text(
            text=user_msg,
            reply_markup=None
        )

        staff_chat_id = context.bot_data.get('staff_chat_id')
        if staff_chat_id:
            try:
                await context.bot.send_message(
                    chat_id=staff_chat_id,
                    text=feedback_msg
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞: {str(e)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_feedback: {str(e)}")
    finally:
        if user_id in user_sessions:
            del user_sessions[user_id]
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_id = update.effective_user.id
        if user_id in user_sessions:
            await delete_previous_keyboards(context, user_id)
            del user_sessions[user_id]
        
        await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {str(e)}")
        return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    error = context.error
    logger.error(f"–û—à–∏–±–∫–∞: {str(error)}", exc_info=True)
    
    try:
        if update and update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start",
                reply_markup=None
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ error_handler: {str(e)}")