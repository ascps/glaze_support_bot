import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, filters
from config import *

logger = logging.getLogger(__name__)

class UserData:
    def __init__(self):
        self.problem_type = None
        self.description = None
        self.media = []
        self.staff_response = None

user_sessions = {}

def get_start_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–∫–ª–µ–∏—Ç—å —Å—Ç–µ–∫–ª–æ", callback_data='application_problem')],
        [InlineKeyboardButton("–£ –º–µ–Ω—è –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞", callback_data='other_problem')]
    ])

def get_send_confirmation_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='confirm_send')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_send')]
    ])

def get_feedback_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–ø–∞—Å–∏–±–æ, –ø–æ–º–æ–≥–ª–æ", callback_data='thanks')],
        [InlineKeyboardButton("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data='more_help')]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    user_sessions[user_id] = UserData()
    await update.message.reply_text(
        "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ì–ª–∞–∑—É—Ä—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=get_start_keyboard()
    )
    return WAITING_FOR_PROBLEM_TYPE

async def handle_problem_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_data = user_sessions[query.from_user.id]

    if query.data == 'application_problem':
        user_data.problem_type = "–ù–∞–∫–ª–µ–π–∫–∞ —Å—Ç–µ–∫–ª–∞"
        await query.edit_message_text(
            "üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'",
            reply_markup=get_send_confirmation_keyboard()
        )
        return WAITING_FOR_APPLICATION_DETAILS
    else:
        user_data.problem_type = "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
        await query.edit_message_text(
            "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'",
            reply_markup=get_send_confirmation_keyboard()
        )
        return WAITING_FOR_OTHER_PROBLEM_DESCRIPTION

async def collect_application_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = user_sessions[update.effective_user.id]
    if update.message.photo:
        user_data.media.append(('photo', update.message.photo[-1].file_id))
    elif update.message.video:
        user_data.media.append(('video', update.message.video.file_id))
    elif update.message.text:
        user_data.description = update.message.text

async def collect_other_problem_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_sessions[update.effective_user.id].description = update.message.text

async def confirm_send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == 'confirm_send':
        try:
            await send_application_to_staff(context, user_id, user_sessions[user_id])
            await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
            return WAITING_FOR_STAFF_RESPONSE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await query.edit_message_text("üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    user_sessions.pop(user_id, None)
    return ConversationHandler.END

async def send_application_to_staff(context: ContextTypes.DEFAULT_TYPE, user_id: int, user_data: UserData):
    staff_chat_id = context.bot_data['staff_chat_id']
    user = await context.bot.get_chat(user_id)
    
    message = await context.bot.send_message(
        chat_id=staff_chat_id,
        text=f"ID: {user_id}\n"
             f"–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {user_data.problem_type}\n"
             f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
             f"–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å:\n"
             f"1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –∏ –≤–≤–µ–¥–∏—Ç–µ /reply_{user_id}\n"
             f"2. –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /reply_{user_id} –í–∞—à —Ç–µ–∫—Å—Ç"
    )
    
    for media_type, file_id in user_data.media:
        try:
            if media_type == 'photo':
                await message.reply_photo(
                    photo=file_id,
                    caption=f"–§–æ—Ç–æ –æ—Ç {user.username or user.id}"
                )
            elif media_type == 'video':
                await message.reply_video(
                    video=file_id,
                    caption=f"–í–∏–¥–µ–æ –æ—Ç {user.username or user.id}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–µ–¥–∏–∞: {e}")
            await context.bot.send_message(
                chat_id=staff_chat_id,
                text=f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {user.username or user.id}"
            )

async def handle_staff_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not update.message or not update.message.text.startswith('/reply'):
            return

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        command_parts = update.message.text.split('_', 1)
        if len(command_parts) < 2:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply_12345 –í–∞—à —Ç–µ–∫—Å—Ç")
            return

        user_id_str = ''.join(filter(str.isdigit, command_parts[1].split()[0]))
        if not user_id_str:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        user_id = int(user_id_str)
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = command_parts[1][len(user_id_str):].strip()
        if not response_text and update.message.reply_to_message:
            response_text = update.message.reply_to_message.text

        if not response_text:
            await update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{response_text}",
                reply_markup=get_feedback_keyboard()
            )
            await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {str(e)}"
            await update.message.reply_text(error_msg)
            logger.error(error_msg)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        await query.answer()
        
        if query.data == 'thanks':
            msg = "üôè –°–ø–∞—Å–∏–±–æ! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞!"
            feedback = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ—à–µ–Ω–∏–µ"
        else:
            msg = "üõé –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!"
            feedback = f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å"
        
        await query.edit_message_text(msg, reply_markup=None)
        await context.bot.send_message(
            chat_id=context.bot_data['staff_chat_id'],
            text=feedback
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–¥–±–µ–∫–∞: {e}")
    finally:
        user_sessions.pop(user_id, None)
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    user_sessions.pop(user_id, None)
    await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    error = context.error
    logger.error(f"–û—à–∏–±–∫–∞: {error}", exc_info=True)
    
    if update and update.callback_query:
        try:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start",
                reply_markup=None
            )
        except:
            pass