import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, filters
from config import *

logger = logging.getLogger(__name__)

class UserData:
    def __init__(self):
        self.problem_type = None
        self.description = None
        self.media = []
        self.staff_response = None

user_sessions = {}

def get_start_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–∫–ª–µ–∏—Ç—å —Å—Ç–µ–∫–ª–æ", callback_data='application_problem')],
        [InlineKeyboardButton("–£ –º–µ–Ω—è –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞", callback_data='other_problem')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_send_confirmation_keyboard():
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='confirm_send')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_send')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_feedback_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞", callback_data='thanks')],
        [InlineKeyboardButton("üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data='more_help')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_id = update.effective_user.id
        user_sessions[user_id] = UserData()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥")
        
        await update.message.reply_text(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ì–ª–∞–∑—É—Ä—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:",
            reply_markup=get_start_keyboard()
        )
        return STATE_PROBLEM_SELECTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def handle_problem_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        user_data = user_sessions.get(user_id)
        
        if not user_data:
            logger.warning(f"–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return await start(update, context)

        if query.data == 'application_problem':
            user_data.problem_type = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞–∫–ª–µ–π–∫–æ–π"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª: –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞–∫–ª–µ–π–∫–æ–π")
            await query.edit_message_text(
                "üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø—Ä–æ–±–ª–µ–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª",
                reply_markup=get_send_confirmation_keyboard()
            )
            return STATE_COLLECT_MEDIA
        else:
            user_data.problem_type = "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª: –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
            await query.edit_message_text(
                "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª",
                reply_markup=get_send_confirmation_keyboard()
            )
            return STATE_COLLECT_DESCRIPTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_problem_type: {str(e)}")
        return ConversationHandler.END

async def collect_application_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        user_data = user_sessions.get(user_id)
        
        if not user_data:
            logger.warning(f"–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_id}")
            return

        if update.message.photo:
            user_data.media.append(('photo', update.message.photo[-1].file_id))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ")
            await update.message.reply_text("üì∑ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª")
        elif update.message.video:
            user_data.media.append(('video', update.message.video.file_id))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ")
            await update.message.reply_text("üé• –í–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª")
        elif update.message.text:
            user_data.description = update.message.text
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ: {update.message.text}")
            await update.message.reply_text("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

async def collect_other_problem_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        user_data = user_sessions.get(user_id)
        
        if user_data and update.message.text:
            user_data.description = update.message.text
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–∏—Å–∞–ª –ø—Ä–æ–±–ª–µ–º—É: {update.message.text}")
            await update.message.reply_text("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

async def confirm_send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        user_data = user_sessions.get(user_id)
        
        if not user_data:
            logger.warning(f"–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–ª—è {user_id}")
            return ConversationHandler.END

        if query.data == 'confirm_send':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏")
            try:
                await send_application_to_staff(context, user_id, user_data)
                await query.edit_message_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
                return STATE_AWAIT_STAFF_REPLY
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {str(e)}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É")
            await query.edit_message_text("üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        
        user_sessions.pop(user_id, None)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_send: {str(e)}")
        return ConversationHandler.END

async def send_application_to_staff(context: ContextTypes.DEFAULT_TYPE, user_id: int, user_data: UserData) -> None:
    try:
        staff_chat_id = context.bot_data.get('staff_chat_id')
        if not staff_chat_id:
            raise ValueError("ID —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        user = await context.bot.get_chat(user_id)
        username = user.username or f"ID:{user.id}"
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –æ—Ç {username} –≤ —á–∞—Ç {staff_chat_id}")

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (#{user_id})\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username if user.username else '–Ω–µ—Ç username'}\n"
            f"üìå –¢–∏–ø: {user_data.problem_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user_data.description or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            f"üí¨ –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å:\n"
            f"1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º\n"
            f"2. –í–≤–µ–¥–∏—Ç–µ /reply_{user_id}"
        )

        staff_message = await context.bot.send_message(
            chat_id=staff_chat_id,
            text=message_text
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ID —Å–æ–æ–±—â–µ–Ω–∏—è: {staff_message.message_id}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        for media_type, file_id in user_data.media:
            try:
                if media_type == 'photo':
                    await staff_message.reply_photo(
                        photo=file_id,
                        caption=f"–§–æ—Ç–æ –æ—Ç @{username}"
                    )
                    logger.info(f"–§–æ—Ç–æ –æ—Ç {username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                elif media_type == 'video':
                    await staff_message.reply_video(
                        video=file_id,
                        caption=f"–í–∏–¥–µ–æ –æ—Ç @{username}"
                    )
                    logger.info(f"–í–∏–¥–µ–æ –æ—Ç {username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {str(e)}")
                await context.bot.send_message(
                    chat_id=staff_chat_id,
                    text=f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{username}"
                )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_application_to_staff: {str(e)}")
        raise

async def handle_staff_response(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not update.message or not update.message.text:
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ reply
        if update.message.reply_to_message:
            reply_text = update.message.text
            original_message = update.message.reply_to_message.text
            if "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞" in original_message:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                user_id_start = original_message.find("(#") + 2
                user_id_end = original_message.find(")", user_id_start)
                if user_id_start > 1 and user_id_end > user_id_start:
                    user_id = int(original_message[user_id_start:user_id_end])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{reply_text}",
                        reply_markup=get_feedback_keyboard()
                    )
                    await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reply_12345
        if update.message.text.startswith('/reply_'):
            parts = update.message.text.split('_', 1)
            if len(parts) == 2:
                user_id_str = ''.join(filter(str.isdigit, parts[1].split()[0]))
                if user_id_str:
                    user_id = int(user_id_str)
                    response_text = parts[1][len(user_id_str):].strip()
                    
                    if response_text:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{response_text}",
                            reply_markup=get_feedback_keyboard()
                        )
                        await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    else:
                        await update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply_12345 –í–∞—à —Ç–µ–∫—Å—Ç")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply_12345 –í–∞—à —Ç–µ–∫—Å—Ç")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_staff_response: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await query.answer()
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–¥–±–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–¥–±–µ–∫–∞
        if query.data == 'thanks':
            user_msg = "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ /start"
            feedback_msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ—à–µ–Ω–∏–µ")
        else:
            user_msg = "üõé –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –î–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ - /start"
            feedback_msg = f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–º–æ—â—å"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_text(
            text=user_msg,
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        staff_chat_id = context.bot_data.get('staff_chat_id')
        if staff_chat_id:
            try:
                await context.bot.send_message(
                    chat_id=staff_chat_id,
                    text=feedback_msg
                )
                logger.info(f"–§–∏–¥–±–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {feedback_msg}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞: {str(e)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_feedback: {str(e)}")
    finally:
        # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id in user_sessions:
            del user_sessions[user_id]
            logger.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
        
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_id = update.effective_user.id
        if user_id in user_sessions:
            del user_sessions[user_id]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥")
        
        await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {str(e)}")
        return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    error = context.error
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(error)}", exc_info=True)
    
    try:
        if update and update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start",
                reply_markup=None
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ error_handler: {str(e)}")